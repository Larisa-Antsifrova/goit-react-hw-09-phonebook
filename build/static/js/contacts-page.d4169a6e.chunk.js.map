{"version":3,"sources":["components/Main/Main.js","components/Section/Section.js","components/Section/Section.module.css","components/PageTitle/PageTitle.module.css","components/PageTitle/PageTitle.js","components/Title/Title.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","views/NotFoundPage.js","components/Title/Title.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","views/ContactsPage.js"],"names":["Main","children","Section","className","styles","section","Container","module","exports","PageTitle","title","defaultProps","NotFoundPage","Title","getFilterValue","state","contacts","filter","getAllContacts","items","getFilteredItems","createSelector","name","number","toLowerCase","includes","toLocaleLowerCase","getLoading","loading","ContactForm","useState","newContact","setNewContact","allContacts","useSelector","dispatch","useDispatch","handleInputChange","useCallback","target","value","handleSubmit","event","preventDefault","contact","existingContact","find","alert","a","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","form","onSubmit","type","onChange","required","btn","Filter","onUpdateFilter","updateFilter","filterValue","autoComplete","ContactListItem","id","isEdited","setIsEdited","saving","setSaving","editedContact","setEditedContact","onDeleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","onUpdateContact","updatedUser","updateContactRequest","patch","updateContactSuccess","updateContactError","updateContact","editorInput","color","height","width","info","btnGroup","save","onClick","cancel","edit","ContactList","useEffect","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","filtered","isLoading","loaderConfig","loader","_","isEmpty","map","item","notification","ContactsPage"],"mappings":"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","file":"static/js/contacts-page.d4169a6e.chunk.js","sourcesContent":["// React imports\nimport React from 'react';\n\n// Imports of helpers\nimport PropTypes from 'prop-types';\n\nconst Main = ({ children }) => {\n  return <main>{children}</main>;\n};\n\nMain.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Main;\n","// Imports from React\nimport React from 'react';\n// Imports of helpers\nimport PropTypes from 'prop-types';\n\nimport Container from '../Container';\n// Styles imports\nimport styles from './Section.module.css';\n\nconst Section = ({ children }) => {\n  return (\n    <section className={styles.section}>\n      <Container>{children}</Container>\n    </section>\n  );\n};\n\nSection.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2aPyg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PageTitle_title__2xk4o\"};","// Imports from React\nimport React from 'react';\n// Imports of helpers\nimport PropTypes from 'prop-types';\n// Styles imports\nimport styles from './PageTitle.module.css';\n\nconst PageTitle = ({ title }) => {\n  return title && <h1 className={styles.title}>{title}</h1>;\n};\n\nPageTitle.defaultProps = {\n  title: '',\n};\n\nPageTitle.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default PageTitle;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__39wGa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2SxIM\",\"btn\":\"ContactForm_btn__1n7b6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__hH5IZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ContactListItem_info__1Jj1H\",\"editorInput\":\"ContactListItem_editorInput__kowzC\",\"btnGroup\":\"ContactListItem_btnGroup__2IeVd\",\"btn\":\"ContactListItem_btn__1rzrV\",\"delete\":\"ContactListItem_delete__JDyz9 ContactListItem_btn__1rzrV\",\"edit\":\"ContactListItem_edit__1ERmT ContactListItem_btn__1rzrV\",\"save\":\"ContactListItem_save__mWhvB ContactListItem_btn__1rzrV\",\"cancel\":\"ContactListItem_cancel__vP0fG ContactListItem_btn__1rzrV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__3PXlp\",\"item\":\"ContactList_item__RcitZ\",\"notification\":\"ContactList_notification__1Zn5w\",\"loader\":\"ContactList_loader__1KrZP\"};","// React imports\nimport React from 'react';\n\n// Components imports\nimport Main from '../components/Main';\nimport Section from '../components/Section';\nimport PageTitle from '../components/PageTitle';\n\nconst NotFoundPage = () => {\n  return (\n    <Main>\n      <Section>\n        <PageTitle title=\"404 Page not Found\" />\n      </Section>\n    </Main>\n  );\n};\n\nexport default NotFoundPage;\n","// Imports from React\nimport React from 'react';\n// Imports of helpers\nimport PropTypes from 'prop-types';\n// Styles imports\nimport styles from './Title.module.css';\n\nconst Title = ({ title }) => {\n  return title && <h2 className={styles.title}>{title}</h2>;\n};\n\nTitle.defaultProps = {\n  title: '',\n};\n\nTitle.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Title;\n","// Imports from Redux Toolkit\nimport { createSelector } from '@reduxjs/toolkit';\n\n// Selector to get filter value\nconst getFilterValue = state => state.contacts.filter;\n\n// Selector to get all contacts\nconst getAllContacts = state => state.contacts.items;\n\n// Selector to get filted contacts (to render in contacts list)\nconst getFilteredItems = createSelector(\n  [getAllContacts, getFilterValue],\n  (items, filter) =>\n    items.filter(\n      ({ name, number }) =>\n        name.toLowerCase().includes(filter.toLocaleLowerCase()) ||\n        number.includes(filter),\n    ),\n);\n\n// Selector to get loading status\nconst getLoading = state => state.contacts.loading;\nconst getUpdateLoading = state => state.contacts.updateLoading;\n\nexport {\n  getFilterValue,\n  getAllContacts,\n  getFilteredItems,\n  getLoading,\n  getUpdateLoading,\n};\n","// React imports\nimport React, { useCallback, useState } from 'react';\n\n// Imports from Redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getAllContacts } from '../../redux/contacts/contacts-selectors';\n\n// Styles imports\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  // Setting up state for input values\n  const [newContact, setNewContact] = useState({ name: '', number: '' });\n  // Getting all contacts from store\n  const allContacts = useSelector(getAllContacts);\n  // Getting dispatch function\n  const dispatch = useDispatch();\n\n  // Function to handle inputs\n  const handleInputChange = useCallback(\n    ({ target: { name, value } }) => {\n      setNewContact({ ...newContact, [name]: value });\n    },\n    [newContact],\n  );\n\n  // Function to handle form submit\n  const handleSubmit = useCallback(\n    event => {\n      event.preventDefault();\n\n      if (!newContact.name) {\n        return;\n      }\n\n      // Checking if the contact already exists\n      const existingContact = allContacts.find(\n        contact => contact.name === newContact.name,\n      );\n\n      if (existingContact) {\n        alert(`${existingContact.name} is already in contacts.`);\n        return;\n      }\n\n      // Dispatching action to add new contact to DB\n      dispatch(addContact(newContact));\n\n      // Reseting local state to clean up input values\n      setNewContact({ name: '', number: '' });\n    },\n    [allContacts, dispatch, newContact],\n  );\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"name\"\n          name=\"name\"\n          value={newContact.name}\n          onChange={handleInputChange}\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={newContact.number}\n          onChange={handleInputChange}\n          required\n        />\n      </label>\n      <button type=\"submit\" className={styles.btn}>\n        Add\n      </button>\n    </form>\n  );\n}\n","// Imports of actions\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  updateContactRequest,\n  updateContactSuccess,\n  updateContactError,\n} from './contacts-actions';\n\n// Imports of libraries\nimport axios from 'axios';\n\n// Function to fetch all contacts from DB\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\n// Function to add new contact to DB\nconst addContact = contact => async dispatch => {\n  dispatch(addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error.message));\n  }\n};\n\n// Function to delete contact from DB\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error.message));\n  }\n};\n\n// Function to update contact from DB\nconst updateContact = (contactId, updatedUser, setSaving) => async dispatch => {\n  dispatch(updateContactRequest());\n\n  try {\n    const { data } = await axios.patch(`/contacts/${contactId}`, updatedUser);\n    dispatch(updateContactSuccess(data));\n    setSaving(false);\n  } catch (error) {\n    dispatch(updateContactError(error.message));\n  }\n};\n\nexport { fetchContacts, addContact, deleteContact, updateContact };\n","// React imports\nimport React, { useCallback } from 'react';\n\n// Imports from Redux\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateFilter } from '../../redux/contacts/contacts-actions';\nimport { getFilterValue } from '../../redux/contacts/contacts-selectors';\n\n// Styles imports\nimport styles from './Filter.module.css';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const onUpdateFilter = useCallback(\n    event => dispatch(updateFilter(event.target.value)),\n    [dispatch],\n  );\n  const filterValue = useSelector(getFilterValue);\n\n  return (\n    <div className={styles.filter}>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={filterValue}\n          onChange={onUpdateFilter}\n          autoComplete=\"off\"\n          required\n        />\n      </label>\n    </div>\n  );\n}\n","// React imports\nimport React, { useCallback, useState } from 'react';\n\n// Imports from Redux\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllContacts } from '../../redux/contacts/contacts-selectors';\nimport {\n  deleteContact,\n  updateContact,\n} from '../../redux/contacts/contacts-operations';\n\n// Helpers imports\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\n// Styles imports\nimport styles from './ContactListItem.module.css';\n\nexport default function ContactListItem({ contact: { id, name, number } }) {\n  const [isEdited, setIsEdited] = useState(false);\n  const [saving, setSaving] = useState(false);\n\n  const [editedContact, setEditedContact] = useState({\n    name: name,\n    number: number,\n  });\n\n  const handleInputChange = useCallback(\n    ({ target: { name, value } }) => {\n      setEditedContact({ ...editedContact, [name]: value });\n    },\n    [editedContact],\n  );\n\n  const dispatch = useDispatch();\n  const onDeleteContact = contactId => dispatch(deleteContact(contactId));\n\n  const allContacts = useSelector(getAllContacts);\n\n  const onUpdateContact = useCallback(\n    (contactId, editedContact) => {\n      if (!editedContact.name || !editedContact.number) {\n        setEditedContact({\n          name: name,\n          number: number,\n        });\n        setIsEdited(true);\n        return;\n      }\n\n      const existingContact = allContacts.find(\n        contact => contact.name === editedContact.name && contact.id !== id,\n      );\n\n      if (existingContact) {\n        alert(`${existingContact.name} is already in contacts.`);\n        setIsEdited(true);\n        return;\n      }\n\n      const theSameContact = allContacts.find(\n        contact => contact.name === editedContact.name && contact.id === id,\n      );\n\n      if (theSameContact) {\n        setIsEdited(false);\n        return;\n      }\n      setSaving(true);\n      dispatch(updateContact(contactId, editedContact, setSaving));\n\n      setIsEdited(false);\n    },\n    [allContacts, dispatch, id, name, number],\n  );\n\n  const loaderConfig = {\n    type: 'TailSpin',\n    color: '#80cbc4',\n    height: 30,\n    width: 30,\n  };\n\n  return (\n    <>\n      <div>\n        {isEdited ? (\n          <div className={styles.editorInput}>\n            <input\n              type=\"name\"\n              name=\"name\"\n              value={editedContact.name}\n              onChange={handleInputChange}\n              required\n            />\n\n            <input\n              type=\"tel\"\n              name=\"number\"\n              value={editedContact.number}\n              onChange={handleInputChange}\n              required\n            />\n          </div>\n        ) : saving ? (\n          <Loader {...loaderConfig} />\n        ) : (\n          <>\n            <p className={styles.info}>{name}:</p>\n            <p className={styles.info}>{number}</p>\n          </>\n        )}\n      </div>\n\n      <div className={styles.btnGroup}>\n        {isEdited ? (\n          <>\n            <button\n              className={styles.save}\n              onClick={() => onUpdateContact(id, editedContact)}\n            >\n              Save\n            </button>\n            <button\n              className={styles.cancel}\n              onClick={() => setIsEdited(false)}\n            >\n              Cancel\n            </button>\n          </>\n        ) : (\n          <button\n            className={styles.edit}\n            onClick={() => {\n              setIsEdited(true);\n            }}\n          >\n            Edit\n          </button>\n        )}\n        <button\n          className={styles.delete}\n          onClick={() => {\n            onDeleteContact(id);\n          }}\n        >\n          Delete\n        </button>\n      </div>\n    </>\n  );\n}\n","// React imports\nimport React, { useEffect } from 'react';\n\n// Components imports\nimport ContactListItem from '../ContactListItem';\n\n// Imports from Redux\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../../redux/contacts/contacts-operations';\nimport {\n  getFilteredItems,\n  getLoading,\n} from '../../redux/contacts/contacts-selectors';\n\n// Helpers imports\nimport _ from 'lodash';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\n// Styles imports\nimport styles from './ContactList.module.css';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n\n  // Sending HTTP request to fetch contacts\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\n\n  // Getting data from Redux state through selectors\n  const filtered = useSelector(getFilteredItems);\n  const isLoading = useSelector(getLoading);\n\n  const loaderConfig = {\n    type: 'TailSpin',\n    color: '#80cbc4',\n    height: 50,\n    width: 50,\n    className: styles.loader,\n  };\n\n  return (\n    <>\n      {isLoading && <Loader {...loaderConfig} />}\n\n      {!_.isEmpty(filtered) && (\n        <ul className={styles.contacts}>\n          {filtered.map(contact => {\n            // console.log(`Render ${contact.name}`);\n            return (\n              <li key={contact.id} className={styles.item}>\n                <ContactListItem contact={contact} />\n              </li>\n            );\n          })}\n        </ul>\n      )}\n\n      {_.isEmpty(filtered) && !isLoading && (\n        <p className={styles.notification}>No contact found.</p>\n      )}\n    </>\n  );\n}\n","// React imports\nimport React from 'react';\n\n// Components imports\nimport Main from '../components/Main';\nimport Section from '../components/Section';\nimport Title from '../components/Title';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <Main>\n      <Section>\n        <Title title=\"Add contacts\" />\n        <ContactForm />\n        <Title title=\"Find contacts\" />\n        <Filter />\n        <Title title=\"Contacts\" />\n        <ContactList />\n      </Section>\n    </Main>\n  );\n};\n\nexport default ContactsPage;\n"],"sourceRoot":""}